// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.0
// source: ai_lab.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShowScoped int32

const (
	ShowScoped_SHOW_NORMAL       ShowScoped = 0
	ShowScoped_SHOW_WITH_DELETED ShowScoped = 1
	ShowScoped_SHOW_ONLY_DELETED ShowScoped = 2
)

// Enum value maps for ShowScoped.
var (
	ShowScoped_name = map[int32]string{
		0: "SHOW_NORMAL",
		1: "SHOW_WITH_DELETED",
		2: "SHOW_ONLY_DELETED",
	}
	ShowScoped_value = map[string]int32{
		"SHOW_NORMAL":       0,
		"SHOW_WITH_DELETED": 1,
		"SHOW_ONLY_DELETED": 2,
	}
)

func (x ShowScoped) Enum() *ShowScoped {
	p := new(ShowScoped)
	*p = x
	return p
}

func (x ShowScoped) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShowScoped) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_lab_proto_enumTypes[0].Descriptor()
}

func (ShowScoped) Type() protoreflect.EnumType {
	return &file_ai_lab_proto_enumTypes[0]
}

func (x ShowScoped) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShowScoped.Descriptor instead.
func (ShowScoped) EnumDescriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{0}
}

type RunStatus int32

const (
	RunStatus_RUN_STATUS_INIT RunStatus = 0
)

// Enum value maps for RunStatus.
var (
	RunStatus_name = map[int32]string{
		0: "RUN_STATUS_INIT",
	}
	RunStatus_value = map[string]int32{
		"RUN_STATUS_INIT": 0,
	}
)

func (x RunStatus) Enum() *RunStatus {
	p := new(RunStatus)
	*p = x
	return p
}

func (x RunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_lab_proto_enumTypes[1].Descriptor()
}

func (RunStatus) Type() protoreflect.EnumType {
	return &file_ai_lab_proto_enumTypes[1]
}

func (x RunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunStatus.Descriptor instead.
func (RunStatus) EnumDescriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{1}
}

type ReqTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// indicate which type this objId belong to !
	ObjectType string `protobuf:"bytes,1,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	// Types that are assignable to Object:
	//	*ReqTarget_Id
	//	*ReqTarget_ObjId
	//	*ReqTarget_Group
	Object isReqTarget_Object `protobuf_oneof:"object"`
}

func (x *ReqTarget) Reset() {
	*x = ReqTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqTarget) ProtoMessage() {}

func (x *ReqTarget) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqTarget.ProtoReflect.Descriptor instead.
func (*ReqTarget) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{0}
}

func (x *ReqTarget) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (m *ReqTarget) GetObject() isReqTarget_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *ReqTarget) GetId() uint64 {
	if x, ok := x.GetObject().(*ReqTarget_Id); ok {
		return x.Id
	}
	return 0
}

func (x *ReqTarget) GetObjId() string {
	if x, ok := x.GetObject().(*ReqTarget_ObjId); ok {
		return x.ObjId
	}
	return ""
}

func (x *ReqTarget) GetGroup() string {
	if x, ok := x.GetObject().(*ReqTarget_Group); ok {
		return x.Group
	}
	return ""
}

type isReqTarget_Object interface {
	isReqTarget_Object()
}

type ReqTarget_Id struct {
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3,oneof"`
}

type ReqTarget_ObjId struct {
	ObjId string `protobuf:"bytes,3,opt,name=objId,proto3,oneof"`
}

type ReqTarget_Group struct {
	Group string `protobuf:"bytes,4,opt,name=group,proto3,oneof"`
}

func (*ReqTarget_Id) isReqTarget_Object() {}

func (*ReqTarget_ObjId) isReqTarget_Object() {}

func (*ReqTarget_Group) isReqTarget_Object() {}

type ReplyHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error code
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// error message
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// used for some more specific response
	Detail string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ReplyHeader) Reset() {
	*x = ReplyHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyHeader) ProtoMessage() {}

func (x *ReplyHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyHeader.ProtoReflect.Descriptor instead.
func (*ReplyHeader) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{1}
}

func (x *ReplyHeader) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ReplyHeader) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ReplyHeader) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type QueryFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//start from 1~N
	PageNum  uint32 `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	PageSize uint32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Sort     string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	// list by app group
	Group string `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	// indicate "group" list match recursively !
	MatchAll bool `protobuf:"varint,5,opt,name=matchAll,proto3" json:"matchAll,omitempty"`
	// search by keyword
	SearchWord string `protobuf:"bytes,6,opt,name=searchWord,proto3" json:"searchWord,omitempty"`
	//enumeration for need detail return
	Detail int32 `protobuf:"varint,7,opt,name=detail,proto3" json:"detail,omitempty"`
	//enumeration for deleted item search
	Show ShowScoped `protobuf:"varint,8,opt,name=show,proto3,enum=bmod.ai_lab.ShowScoped" json:"show,omitempty"`
	// filters by predefined key=value pairs
	EqualFilters map[string]string `protobuf:"bytes,9,rep,name=equalFilters,proto3" json:"equalFilters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryFilters) Reset() {
	*x = QueryFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFilters) ProtoMessage() {}

func (x *QueryFilters) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFilters.ProtoReflect.Descriptor instead.
func (*QueryFilters) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{2}
}

func (x *QueryFilters) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *QueryFilters) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryFilters) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *QueryFilters) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *QueryFilters) GetMatchAll() bool {
	if x != nil {
		return x.MatchAll
	}
	return false
}

func (x *QueryFilters) GetSearchWord() string {
	if x != nil {
		return x.SearchWord
	}
	return ""
}

func (x *QueryFilters) GetDetail() int32 {
	if x != nil {
		return x.Detail
	}
	return 0
}

func (x *QueryFilters) GetShow() ShowScoped {
	if x != nil {
		return x.Show
	}
	return ShowScoped_SHOW_NORMAL
}

func (x *QueryFilters) GetEqualFilters() map[string]string {
	if x != nil {
		return x.EqualFilters
	}
	return nil
}

// define AILab list informations
type AILabItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabId     uint64 `protobuf:"varint,1,opt,name=labId,proto3" json:"labId,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	App       string `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	Type      string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Classify  string `protobuf:"bytes,5,opt,name=classify,proto3" json:"classify,omitempty"`
	Creator   string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt int64  `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// app defined tags
	Tags map[string]string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// statistics runs
	Statistics map[string]uint32 `protobuf:"bytes,11,rep,name=statistics,proto3" json:"statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// system defined run status
	Status uint32 `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	//some more details about the AILab defined by app
	Meta *structpb.Struct `protobuf:"bytes,13,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *AILabItem) Reset() {
	*x = AILabItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AILabItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AILabItem) ProtoMessage() {}

func (x *AILabItem) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AILabItem.ProtoReflect.Descriptor instead.
func (*AILabItem) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{3}
}

func (x *AILabItem) GetLabId() uint64 {
	if x != nil {
		return x.LabId
	}
	return 0
}

func (x *AILabItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AILabItem) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *AILabItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AILabItem) GetClassify() string {
	if x != nil {
		return x.Classify
	}
	return ""
}

func (x *AILabItem) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *AILabItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AILabItem) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AILabItem) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *AILabItem) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AILabItem) GetStatistics() map[string]uint32 {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *AILabItem) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AILabItem) GetMeta() *structpb.Struct {
	if x != nil {
		return x.Meta
	}
	return nil
}

type AILabDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item      *AILabItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Group     string     `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Location  string     `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Namespace string     `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *AILabDetail) Reset() {
	*x = AILabDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AILabDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AILabDetail) ProtoMessage() {}

func (x *AILabDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AILabDetail.ProtoReflect.Descriptor instead.
func (*AILabDetail) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{4}
}

func (x *AILabDetail) GetItem() *AILabItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *AILabDetail) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AILabDetail) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *AILabDetail) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type PagedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total items matched
	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ceil(total/pageSize) ,be zero if request pageSize is zero
	TotalPages uint64 `protobuf:"varint,2,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	// request pageNum
	PageNum uint64 `protobuf:"varint,3,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// request pageSize, if zero indicate none paged querys
	PageSize uint64 `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// used for next pagedQuery hints
	Next string `protobuf:"bytes,5,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *PagedInfo) Reset() {
	*x = PagedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagedInfo) ProtoMessage() {}

func (x *PagedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagedInfo.ProtoReflect.Descriptor instead.
func (*PagedInfo) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{5}
}

func (x *PagedInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PagedInfo) GetTotalPages() uint64 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *PagedInfo) GetPageNum() uint64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *PagedInfo) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PagedInfo) GetNext() string {
	if x != nil {
		return x.Next
	}
	return ""
}

// list AILabs
type ReqListLabs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *QueryFilters `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ReqListLabs) Reset() {
	*x = ReqListLabs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqListLabs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqListLabs) ProtoMessage() {}

func (x *ReqListLabs) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqListLabs.ProtoReflect.Descriptor instead.
func (*ReqListLabs) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{6}
}

func (x *ReqListLabs) GetFilters() *QueryFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ReplyListLabs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ReplyHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Pages  *PagedInfo   `protobuf:"bytes,2,opt,name=pages,proto3" json:"pages,omitempty"`
	Items  []*AILabItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ReplyListLabs) Reset() {
	*x = ReplyListLabs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyListLabs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyListLabs) ProtoMessage() {}

func (x *ReplyListLabs) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyListLabs.ProtoReflect.Descriptor instead.
func (*ReplyListLabs) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{7}
}

func (x *ReplyListLabs) GetHeader() *ReplyHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ReplyListLabs) GetPages() *PagedInfo {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *ReplyListLabs) GetItems() []*AILabItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// create new lab
type ReqCreateLab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (group,name) must be unique
	Group     string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	App       string `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	Type      string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Classify  string `protobuf:"bytes,5,opt,name=classify,proto3" json:"classify,omitempty"`
	Creator   string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Namespace string `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// app defined tags
	Tags map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// app defined meta data
	Meta *structpb.Struct `protobuf:"bytes,9,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *ReqCreateLab) Reset() {
	*x = ReqCreateLab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateLab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateLab) ProtoMessage() {}

func (x *ReqCreateLab) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateLab.ProtoReflect.Descriptor instead.
func (*ReqCreateLab) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{8}
}

func (x *ReqCreateLab) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ReqCreateLab) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqCreateLab) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *ReqCreateLab) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReqCreateLab) GetClassify() string {
	if x != nil {
		return x.Classify
	}
	return ""
}

func (x *ReqCreateLab) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ReqCreateLab) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ReqCreateLab) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ReqCreateLab) GetMeta() *structpb.Struct {
	if x != nil {
		return x.Meta
	}
	return nil
}

type ReqBatchCreateLab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// override per lab configuration
	Group     string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	App       string `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	Creator   string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// at least 1 lab configuration must be exists
	Labs []*ReqCreateLab `protobuf:"bytes,5,rep,name=labs,proto3" json:"labs,omitempty"`
}

func (x *ReqBatchCreateLab) Reset() {
	*x = ReqBatchCreateLab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBatchCreateLab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBatchCreateLab) ProtoMessage() {}

func (x *ReqBatchCreateLab) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBatchCreateLab.ProtoReflect.Descriptor instead.
func (*ReqBatchCreateLab) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{9}
}

func (x *ReqBatchCreateLab) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ReqBatchCreateLab) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *ReqBatchCreateLab) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *ReqBatchCreateLab) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ReqBatchCreateLab) GetLabs() []*ReqCreateLab {
	if x != nil {
		return x.Labs
	}
	return nil
}

// update lab meta information
type ReqUpdateLab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app defined tags
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// app defined meta data
	Meta *structpb.Struct `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *ReqUpdateLab) Reset() {
	*x = ReqUpdateLab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_lab_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateLab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateLab) ProtoMessage() {}

func (x *ReqUpdateLab) ProtoReflect() protoreflect.Message {
	mi := &file_ai_lab_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateLab.ProtoReflect.Descriptor instead.
func (*ReqUpdateLab) Descriptor() ([]byte, []int) {
	return file_ai_lab_proto_rawDescGZIP(), []int{10}
}

func (x *ReqUpdateLab) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ReqUpdateLab) GetMeta() *structpb.Struct {
	if x != nil {
		return x.Meta
	}
	return nil
}

var File_ai_lab_proto protoreflect.FileDescriptor

var file_ai_lab_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x09, 0x52, 0x65, 0x71,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x6f, 0x62, 0x6a,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x4b, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x81, 0x03, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61,
	0x62, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x52, 0x04, 0x73, 0x68,
	0x6f, 0x77, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e,
	0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x04, 0x0a, 0x09, 0x41, 0x49, 0x4c, 0x61, 0x62, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61,
	0x62, 0x2e, 0x41, 0x49, 0x4c, 0x61, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x41, 0x49,
	0x4c, 0x61, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x89, 0x01, 0x0a, 0x0b, 0x41, 0x49, 0x4c, 0x61, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x2a, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x41, 0x49, 0x4c,
	0x61, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x8b, 0x01, 0x0a,
	0x09, 0x50, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x42, 0x0a, 0x0b, 0x52, 0x65,
	0x71, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6d, 0x6f,
	0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x9d,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x73,
	0x12, 0x30, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x41, 0x49,
	0x4c, 0x61, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd1,
	0x02, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e,
	0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x61, 0x62, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69,
	0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x52, 0x04, 0x6c, 0x61, 0x62, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69,
	0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x4b, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x20, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x32, 0xa2, 0x03, 0x0a, 0x05, 0x41, 0x49, 0x4c, 0x61, 0x62,
	0x12, 0x42, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x12, 0x19, 0x2e,
	0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x1a, 0x18, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e,
	0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x73,
	0x12, 0x18, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x73, 0x1a, 0x1a, 0x2e, 0x62, 0x6d, 0x6f,
	0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x62, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4c, 0x61, 0x62, 0x12, 0x16, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c,
	0x61, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x18, 0x2e, 0x62,
	0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x41, 0x49, 0x4c, 0x61, 0x62,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x12, 0x16, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f,
	0x6c, 0x61, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x18, 0x2e,
	0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x12, 0x19, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69,
	0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x1a, 0x18, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x12,
	0x1e, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52, 0x65,
	0x71, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x1a,
	0x18, 0x2e, 0x62, 0x6d, 0x6f, 0x64, 0x2e, 0x61, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x70,
	0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ai_lab_proto_rawDescOnce sync.Once
	file_ai_lab_proto_rawDescData = file_ai_lab_proto_rawDesc
)

func file_ai_lab_proto_rawDescGZIP() []byte {
	file_ai_lab_proto_rawDescOnce.Do(func() {
		file_ai_lab_proto_rawDescData = protoimpl.X.CompressGZIP(file_ai_lab_proto_rawDescData)
	})
	return file_ai_lab_proto_rawDescData
}

var file_ai_lab_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ai_lab_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_ai_lab_proto_goTypes = []interface{}{
	(ShowScoped)(0),           // 0: bmod.ai_lab.ShowScoped
	(RunStatus)(0),            // 1: bmod.ai_lab.RunStatus
	(*ReqTarget)(nil),         // 2: bmod.ai_lab.ReqTarget
	(*ReplyHeader)(nil),       // 3: bmod.ai_lab.ReplyHeader
	(*QueryFilters)(nil),      // 4: bmod.ai_lab.QueryFilters
	(*AILabItem)(nil),         // 5: bmod.ai_lab.AILabItem
	(*AILabDetail)(nil),       // 6: bmod.ai_lab.AILabDetail
	(*PagedInfo)(nil),         // 7: bmod.ai_lab.PagedInfo
	(*ReqListLabs)(nil),       // 8: bmod.ai_lab.ReqListLabs
	(*ReplyListLabs)(nil),     // 9: bmod.ai_lab.ReplyListLabs
	(*ReqCreateLab)(nil),      // 10: bmod.ai_lab.ReqCreateLab
	(*ReqBatchCreateLab)(nil), // 11: bmod.ai_lab.ReqBatchCreateLab
	(*ReqUpdateLab)(nil),      // 12: bmod.ai_lab.ReqUpdateLab
	nil,                       // 13: bmod.ai_lab.QueryFilters.EqualFiltersEntry
	nil,                       // 14: bmod.ai_lab.AILabItem.TagsEntry
	nil,                       // 15: bmod.ai_lab.AILabItem.StatisticsEntry
	nil,                       // 16: bmod.ai_lab.ReqCreateLab.TagsEntry
	nil,                       // 17: bmod.ai_lab.ReqUpdateLab.TagsEntry
	(*structpb.Struct)(nil),   // 18: google.protobuf.Struct
}
var file_ai_lab_proto_depIdxs = []int32{
	0,  // 0: bmod.ai_lab.QueryFilters.show:type_name -> bmod.ai_lab.ShowScoped
	13, // 1: bmod.ai_lab.QueryFilters.equalFilters:type_name -> bmod.ai_lab.QueryFilters.EqualFiltersEntry
	14, // 2: bmod.ai_lab.AILabItem.tags:type_name -> bmod.ai_lab.AILabItem.TagsEntry
	15, // 3: bmod.ai_lab.AILabItem.statistics:type_name -> bmod.ai_lab.AILabItem.StatisticsEntry
	18, // 4: bmod.ai_lab.AILabItem.meta:type_name -> google.protobuf.Struct
	5,  // 5: bmod.ai_lab.AILabDetail.item:type_name -> bmod.ai_lab.AILabItem
	4,  // 6: bmod.ai_lab.ReqListLabs.filters:type_name -> bmod.ai_lab.QueryFilters
	3,  // 7: bmod.ai_lab.ReplyListLabs.header:type_name -> bmod.ai_lab.ReplyHeader
	7,  // 8: bmod.ai_lab.ReplyListLabs.pages:type_name -> bmod.ai_lab.PagedInfo
	5,  // 9: bmod.ai_lab.ReplyListLabs.items:type_name -> bmod.ai_lab.AILabItem
	16, // 10: bmod.ai_lab.ReqCreateLab.tags:type_name -> bmod.ai_lab.ReqCreateLab.TagsEntry
	18, // 11: bmod.ai_lab.ReqCreateLab.meta:type_name -> google.protobuf.Struct
	10, // 12: bmod.ai_lab.ReqBatchCreateLab.labs:type_name -> bmod.ai_lab.ReqCreateLab
	17, // 13: bmod.ai_lab.ReqUpdateLab.tags:type_name -> bmod.ai_lab.ReqUpdateLab.TagsEntry
	18, // 14: bmod.ai_lab.ReqUpdateLab.meta:type_name -> google.protobuf.Struct
	10, // 15: bmod.ai_lab.AILab.CreateLab:input_type -> bmod.ai_lab.ReqCreateLab
	8,  // 16: bmod.ai_lab.AILab.ListLabs:input_type -> bmod.ai_lab.ReqListLabs
	2,  // 17: bmod.ai_lab.AILab.QueryLab:input_type -> bmod.ai_lab.ReqTarget
	2,  // 18: bmod.ai_lab.AILab.DeleteLab:input_type -> bmod.ai_lab.ReqTarget
	12, // 19: bmod.ai_lab.AILab.UpdateLab:input_type -> bmod.ai_lab.ReqUpdateLab
	11, // 20: bmod.ai_lab.AILab.BatchCreateLab:input_type -> bmod.ai_lab.ReqBatchCreateLab
	3,  // 21: bmod.ai_lab.AILab.CreateLab:output_type -> bmod.ai_lab.ReplyHeader
	9,  // 22: bmod.ai_lab.AILab.ListLabs:output_type -> bmod.ai_lab.ReplyListLabs
	6,  // 23: bmod.ai_lab.AILab.QueryLab:output_type -> bmod.ai_lab.AILabDetail
	3,  // 24: bmod.ai_lab.AILab.DeleteLab:output_type -> bmod.ai_lab.ReplyHeader
	3,  // 25: bmod.ai_lab.AILab.UpdateLab:output_type -> bmod.ai_lab.ReplyHeader
	3,  // 26: bmod.ai_lab.AILab.BatchCreateLab:output_type -> bmod.ai_lab.ReplyHeader
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_ai_lab_proto_init() }
func file_ai_lab_proto_init() {
	if File_ai_lab_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ai_lab_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_lab_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_lab_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_lab_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AILabItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_lab_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AILabDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_lab_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_lab_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqListLabs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_lab_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyListLabs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_lab_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateLab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_lab_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBatchCreateLab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_lab_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateLab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ai_lab_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ReqTarget_Id)(nil),
		(*ReqTarget_ObjId)(nil),
		(*ReqTarget_Group)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ai_lab_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ai_lab_proto_goTypes,
		DependencyIndexes: file_ai_lab_proto_depIdxs,
		EnumInfos:         file_ai_lab_proto_enumTypes,
		MessageInfos:      file_ai_lab_proto_msgTypes,
	}.Build()
	File_ai_lab_proto = out.File
	file_ai_lab_proto_rawDesc = nil
	file_ai_lab_proto_goTypes = nil
	file_ai_lab_proto_depIdxs = nil
}
